// Registers
logic [7:0] array[13:0];
logic [7:0] next_array[13:0];
logic [15:0] outreg;
logic [15:0] next_outreg;

// Array
always_ff begin
  if (n_rst == 1'b0) begin
    array <= 0;
  end else begin
    array <= next_array;
  end
end

// Outreg
always_ff begin
  if (n_rst == 1'b0) begin
    outreg <= 0;
  end else begin
    outreg <= next_outreg;
  end
end

// Status Register (0x0)
always_comb begin
  next_array[0] = 8'b00000000; // Default
  next_array[1] = 8'b00000000; // Default

  if (modwait == 1'b1) begin
    next_array[0] = 8'b00000001;
  end

  if (err == 1'b1) begin
    next_array[1] = 8'b00000001;
  end
end

// Result Register (0x2)
always_comb begin
  next_array[2] = fir_out[7:0];
  next_array[3] = fir_out[15:8];
end

// New Sample Register (0x4)
always_comb begin
  if (hsel == 1'b1 && haddr == 4'b0100 && hwrite == 1'b1) begin // set new sample value
    next_array[4] = hwdata[7:0];
    next_array[5] = hwdata[15:8];
  end
end

// F0 Coefficient Register (0x6)
always_comb begin
  if (hsel == 1'b1 && haddr == 4'b0110 && hwrite == 1'b1) begin // set new F0 value
    next_array[6] = hwdata[7:0];
    next_array[7] = hwdata[15:8];
  end
end

// F1 Coefficient Register (0x8)
always_comb begin
  if (hsel == 1'b1 && haddr == 4'b1000 && hwrite == 1'b1) begin // set new F1 value
    next_array[8] = hwdata[7:0];
    next_array[9] = hwdata[15:8];
  end
end

// F2 Coefficient Register (0xA)
always_comb begin
  if (hsel == 1'b1 && haddr == 4'b1010 && hwrite == 1'b1) begin // set new F2 value
    next_array[10] = hwdata[7:0];
    next_array[11] = hwdata[15:8];
  end
end

// F3 Coefficient Register (0xC)
always_comb begin
  if (hsel == 1'b1 && haddr == 4'b1100 && hwrite == 1'b1) begin // set new F3 value
    next_array[12] = hwdata[7:0];
    next_array[13] = hwdata[15:8];
  end
end

// Coefficient Set Confirmation Register (0xE)
always_comb begin
  if (hsel == 1'b1 && haddr == 4'b1110 && hwrite == 1'b1) begin // Writing to register
    next_array[14] = hwdata[7:0]; // ignore upper byte
  end
  if (clear_new_coeff == 1'b1) begin // coefficient loading complete
    next_array[14] = 8'b00000000;
  end
end

// Outreg, other outputs
always_comb begin
  data_ready = 1'b0; // Default
  new_coefficient_set = 1'b0; // Default
  hresp = 1'b0; // Default
  next_outreg = outreg; // Default
  if (hsel == 1'b1 && hwrite == 1'b0) begin
    if (haddr == 4'b0000) // Read status register
      next_outreg = {array[1], array[0]};
    else if (haddr == 4'b0010) // Read result register
      next_outreg = {array[3], array[2]};
    else if (haddr == 4'b0100) // Read new sample register
      next_outreg = {array[5], array[4]};
      data_ready = 1'b1; // New data ready
    else if (haddr == 4'b0110) // Read f0 coefficient register
      next_outreg = {array[7], array[6]};
      new_coefficient_set = 1'b1;
    else if (haddr == 4'b1000) // Read f1 coefficient register
      next_outreg = {array[9], array[8]};
      new_coefficient_set = 1'b1;
    else if (haddr == 4'b1010) // Read f2 coefficient register
      next_outreg = {array[11], array[10]};
      new_coefficient_set = 1'b1;
    else if (haddr == 4'b1100) // Read f3 coefficient register
      next_outreg = {array[13], array[12]};
      new_coefficient_set = 1'b1;
    else if (haddr == 4'b1110) // Read coefficient set confirmation register
      next_outreg = {8'b00000000, array[14]};
    end else
      hresp = 1'b1; // invalid address
  end
end

// Fir coefficient output
always_comb begin
  fir_coefficient = {array[7 + coeff_num], array[6 + coeff_num]};
end

// Outputs
assign hrdata = outreg;
assign sample_data = {array[5], array[4]};