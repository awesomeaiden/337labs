Declare all the registers to be 0-6 if the reset is 0.
Else register = next register

// Registers
logic [7:0] array[4:0];
logic [7:0] next_array[4:0];
logic [7:0] outreg;
logic [7:0] next_outreg;

// Array
always_ff begin
  if (n_rst == 1'b0) begin
    array <= 0;
  end else begin
    array <= next_array;
  end
end

// Outreg
always_ff begin
  if (n_rst == 1'b0) begin
    outreg <= 0;
  end else begin
    outreg <= next_outreg;
  end
end

// Data Status Register
always_comb begin
  array[0] <= data_ready; // fill excess with 1s in actual code
end

// Error Status Register
always_comb begin
  if (overrun_error == 1'b0 && framing_error == 1'b0)
    array[1] <= 2'b00; // fill excess with 1s in actual code
  else if (framing_error = 1'b1)
    array[1] <= 2'b01; // fill excess with 1s in actual code
  else if (overrun_error = 1'b1)
    array[1] <= 2'b10; // fill excess with 1s in actual code
end

// Bit period [7:0] configuration register
always_comb begin
  if (psel == 1'b1 && pwrite == 1'b1 && penable == 1'b1 && paddr = 3'b010)
    array[2] <= pwdata;
end

// Bit period [13:8] configuration register
always_comb begin
  if (psel == 1'b1 && pwrite == 1'b1 && penable == 1'b1 && paddr = 3'b011)
    array[3] <= pwdata; // fill excess with 1s in actual code
end

// Data Size [3:0] configuration register
always_comb begin
  if (psel == 1'b1 && pwrite == 1'b1 && penable == 1'b1 && paddr = 3'b100)
    array[4] <= pwdata;  // fill excess with 1s in actual code
end

// Outreg, data_read, and pslverr
always_comb begin
  data_read = 1'b0; // Default
  pslverr = 1'b0; // Default
  if (psel == 1'b1 && pwrite == 1'b0 && penable == 1'b1 && data_ready == 1'b1) begin
    if (paddr == 3'b000)
      outreg <= array[0];
      pslverr <= 1'b0; // valid operation
    else if (paddr == 3'b001)
      outreg <= array[1];
      pslverr <= 1'b0; // valid operation
    else if (paddr == 3'b010)
      outreg <= array[2];
      pslverr <= 1'b0; // valid operation
    else if (paddr == 3'b011)
      outreg <= array[3];
      pslverr <= 1'b0; // valid operation
    else if (paddr == 3'b100)
      outreg <= array[4];
      pslverr <= 1'b10; // valid operation
    else if (paddr == 3'b110) begin
      outreg <= rx_data;
      pslverr <= 1'b0; // valid operation
      data_read <= 1'b1; // indicate data has been read
    end else
      pslverr <= 1'b1; // invalid address
  end else if (psel == 1'b1 && pwrite == 1'b0 && penable == 1'b1 && data_ready == 1'b0) begin
    pslverr <= 1'b1; // No data ready to read!
  end
end

// Outputs
assign prdata = outreg;
assign data_size = array[4];
assign bit_period = array[3:2];